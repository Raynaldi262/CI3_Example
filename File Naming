1. File Naming
    Class files must be named in a Ucfirst-like manner, while any other file name (configurations, views, generic scripts, etc.)
    should be in all lowercase.
    Example
      incorect
        somelibrary.php
        someLibrary.php
        SOMELIBRARY.php
        Some_Library.php

        Application_config.php
        Application_Config.php
        applicationConfig.php

      Correct
        Somelibrary.php
        Some_library.php

        applicationconfig.php
        application_config.php

2. Class and Method Naming
     - Class names should always start with an uppercase letter. Multiple words should be separated with an underscore, and not CamelCased
       Example
        incorrect
          class superclass
          class SuperClass

         Correct
          class Super_class

      - Class methods should be entirely lowercased and named to clearly indicate their function, preferably including a verb. 
        Try to avoid overly long and verbose names. Multiple words should be separated with an underscore.
        Example
          Incorrect 
            function fileproperties()               // not descriptive and needs underscore separator
            function fileProperties()               // not descriptive and uses CamelCase
            function getfileproperties()            // Better!  But still missing underscore separator
            function getFileProperties()            // uses CamelCase
            function get_the_file_properties_from_the_file()        // wordy

          Correct
            function get_file_properties()  // descriptive, underscore separator, and all lowercase letters

3. Variabels Names
    Variables should contain only lowercase letters, use underscore separators, and be reasonably named to indicate their purpose and contents. 
    Very short, non-word variables should only be used as iterators in for() loops.

    Example
      Incorrect
        $j = 'foo';             // single letter variables should only be used in for() loops
        $Str                    // contains uppercase letters
        $bufferedText           // uses CamelCasing, and could be shortened without losing semantic meaning
        $groupid                // multiple words, needs underscore separator
        $name_of_last_city_used // too long
      
      Correct
        for ($j = 0; $j < 10; $j++)
        $str
        $buffer
        $group_id
        $last_city

4. Commenting
    Use single line comments within code, leaving a blank line between large comment blocks and code.
    Example 
      // break up the string by newlines
      $parts = explode("\n", $str);

      // A longer comment that needs to give greater detail on what is
      // occurring and why can use multiple single-line comments.  Try to
      // keep the width reasonable, around 70 characters is the easiest to
      // read.  Don't hesitate to link to permanent external resources
      // that may provide greater detail:
      //
      // http://example.com/information_about_something/in_particular/

      $parts = $this->foo($parts);


5. Constants
	Constants follow the same guidelines as do variables, except constants should always be fully uppercase.
	Always use CodeIgniter constants when appropriate, i.e. SLASH, LD, RD, PATH_CACHE, etc.
	Example
		Correct
			MY_CONSTANT
			NEWLINE
			SUPER_CLASS_VERSION
			$str = str_replace(LD.'foo'.RD, 'bar', $str);

6. True, False, Null
	TRUE, FALSE, and NULL keywords should always be fully uppercase
	CORRECT
		if ($foo == TRUE)
		$bar = FALSE;
		function foo($bar = NULL)

7. Logical Operators
	Use of the || “or” comparison operator is discouraged, as its clarity on some output devices is low (looking like the number 11, for instance). 
	&& is preferred over AND but either are acceptable, 
	and a space should always precede and follow !.
	Correct
		if ($foo OR $bar)
		if ($foo && $bar) // recommended
		if ( ! $foo)
		if ( ! is_array($foo))
	
	// PENTINGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
8. Comparing return values and typecasting
	Some PHP functions return FALSE on failure, but may also have a valid return value of “” or 0, which would evaluate to FALSE in loose comparisons
	Use the same stringency in returning and checking your own variables. Use === and !== as necessary.
		Correct
			- if (strpos($str, 'foo') === FALSE)
			
			- function build_string($str = "")
			  {
					if ($str === "")
					{

					}
			  }

			- str = (string) $str; // cast $str as a string

9. Debuging code
	Things such as var_dump(), print_r(), die()/exit() should not be included in your code unless it serves a specific purpose other than debugging
	
10. One file per class
	Use separate files for each class, unless the classes are closely related. An example of a CodeIgniter file that contains multiple classes is the Xmlrpc library file.

11. Whitespaces
	Use tabs for whitespace in your code, not spaces. This may seem like a small thing, but using tabs instead of whitespace allows the developer 
	looking at your code to have indentation at levels that they prefer and customize in whatever application they use. And as a side benefit,
	it results in (slightly) more compact files, storing one tab character versus, say, four space characters.

12. Line breaks
	Files must be saved with Unix line breaks

13. Code indenting
	Use Allman style indenting. With the exception of Class declarations, braces are always placed on a line by themselves, and indented at the same level as the control statement that “owns” them.
	Example
		Correct
			function foo($bar)
			{
				// ...
			}

			foreach ($arr as $key => $val)
			{
				// ...
			}

14. Bracket and  Parenthetic spacing
	In general, parenthesis and brackets should not use any additional spaces. 
	The exception is that a space should always follow PHP control structures that accept arguments with parenthesis 
	(declare, do-while, elseif, for, foreach, if, switch, while), to help distinguish them from functions and increase readability.
	Example
		- $arr[$foo] = 'foo'; // no spaces around array keys
		- foreach ($query->result() as $row) 
		- function foo($bar) // no spaces around parenthesis in function declarations
		  {

		  }

15. Localized text
	CodeIgniter libraries should take advantage of corresponding language files whenever possible.
	Example
		incorrect
			return "Invalid Selection";

		correct
			return $this->lang->line('invalid_selection');

16. Private function & method
	Methods and variables that are only accessed internally, such as utility and helper functions that your public methods use for code abstraction,
	should be prefixed with an underscore.
	Example
		public function convert_text()
		private function _convert_text()

17. SHORT OPEN TAG
	Always use full PHP opening tags, in case a server does not have short_open_tag enabled.
	Example
		Incorrect
			<? echo $foo; ?>
			<?=$foo?>
		Correct
			<?php echo $foo; ?>

18. One statement perline
	$foo = 'this';
	$bar = 'that';
	$bat = str_replace($foo, $bar, $bag);
	
19. String
	Always use single quoted strings unless you need variables parsed
	use braces to prevent greedy token parsing
	You may also use double-quoted strings if the string contains single quotes, so you do not have to use escape characters.
	Example
		Incorrect
			"My String"                                     // no variable parsing, so no use for double quotes
			"My string $foo"                                // needs braces
			'SELECT foo FROM bar WHERE baz = \'bag\''       // ugly
		Correct
			'My String'
			"My string {$foo}"
			"SELECT foo FROM bar WHERE baz = 'bag'"

20. SQL Queries
	SQL keywords are always capitalized: SELECT, INSERT, UPDATE, WHERE, AS, JOIN, ON, IN, etc.
	Break up long queries into multiple lines for legibility, preferably breaking for each clause.

	$query = $this->db->query("SELECT foo, bar, baz, foofoo, foobar AS raboof, foobaz
					FROM exp_pre_email_addresses
					WHERE foo != 'oof'
					AND baz != 'zab'
					ORDER BY foobaz
					LIMIT 5, 100");








	


